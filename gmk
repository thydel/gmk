#!/usr/bin/make -f

MAKEFLAGS += -Rr --warn-undefined-variables
SHELL != which bash
.DEFAULT_GOAL := help

.DELETE_ON_ERROR:

git.test != git rev-parse --is-inside-work-tree > /dev/null 2>&1 && date
. := $(or $(git.test),$(error not in a git dir))
git.dir != git rev-parse --git-dir
git.exclude := $(git.dir)/info/exclude

id := gmk
tmp := .$(id)
ext ?= ext
self := $(lastword $(MAKEFILE_LIST))
file ?= $(or $(and $(wildcard $(id)-$(USER).yml), $(id)-$(USER)), $(and $(wildcard $(id).yml), $(id)), $(error no $(id) file))

adam := $(tmp)/.adam
ultimo := /proc/self
$(ultimo):;
$(adam):; touch -d @0 $@
old-or-young := && echo $(adam) || echo $(ultimo)
lineinfile = $(eval $2:: $(shell test -f $2 && grep -q '^$1$$' $2 $(old-or-young)); echo '$1' >> $$@)

dirs := $(tmp) $(ext)
stones := $(dirs:%=%/.stone)
mailmap := .mailmap
stones: $(stones)
.PHONY: stones
$(self): $(stones) $(adam) do-mailmap
%/.stone:; mkdir -p $(@D); touch $@
do-mailmap: $(shell test -f $(mailmap) || touch $(mailmap))
.PHONY: do-mailmap
excluded := $(tmp) $(ext) $(mailmap)
$(foreach _,$(excluded),$(call lineinfile,$_,$(git.exclude)))

. := $(or $(wildcard $(file).yml),$(error no $(file).yml))

out := $(tmp)/$(file)
-include $(out).mk

yml2js.py := import sys, yaml, json;
yml2js.py += json.dump(yaml.load(sys.stdin), sys.stdout, indent=2, default=str, sort_keys=True)

yml2js := python -c '$(yml2js.py)'

$(file).yml types.jq config.jq git.jq:;

$(out).js: $(file).yml $(self); @ < $< $(yml2js) > $@

local := /usr/local
bin := $(local)/bin
etc := $(local)/etc/$(id)
lib.installed := $(local)/lib/$(id)
lib.here := .

ifeq ($(dir $(self)),./)
lib := $(lib.here)
else
lib := $(lib.installed)
endif

jqs := types default mk
$(foreach jq,$(jqs),$(eval $(jq).jq := $(lib)/$(jq).jq))
$(eval jqs.jq := $(jqs:%=$$(%.jq)))

ifeq ($(dir $(self)),./)
cmds := $(id)
libs := $(jqs:%=%.jq)
etcs :=
bin.files := $(cmds:%=$(bin)/%)
etc.files := $(etcs:%=$(etc)/%)
lib.files := $(libs:%=$(lib.installed)/%)
files := $(bin.files) $(etc.files) $(lib.files)
install = install $< $@
$(bin)/%: %; $(install)
$(lib.files): $(lib.installed)/% : %; $(install)
install: $(lib.installed)/.stone $(files);
.PHONY: install
endif

help :=
help.loop :=
help.self :=

install.help := install gmk (invoked as "./gmk" from itself)
help += install

$(out).mk: $(jqs.jq)
$(out).mk: $(out).js; < $< jq -f $(types.jq) | jq -f $(default.jq) | jq -f $(mk.jq) -r > $@

init := hub mailmap exclude
init: $(init);
.PHONY: init
init.help := gmk $(init)
help += init

gitkey = $(config.$(git.$1.conf).key)

ifeq ($(ext),.)
$(foreach item, $(git.items), $(call lineinfile,$(item),$(git.exclude)))
endif

ifneq ($(ext),.)
$(git.items): % : $(ext)/%
.PHONY: $(git.items)
endif
$(git.items:%=%/clone): %/clone: $(ext)/%
gitdirs := $(git.items:%=$(ext)/%)
$(gitdirs): ssh = GIT_SSH_COMMAND='ssh -i ~/.ssh/$(call gitkey,$(@F))'
$(gitdirs):; $(ssh) git clone -b $(git.$(@F).version) $(git.$(@F).git) $(ext)/$(@F)
clone: $(gitdirs)
.PHONY: clone
clone.help := git clone using gmk data for key, branch and name
help += clone
help.loop += clone

define git.cmd
$(git.items:%=%/$1): %/$1: %/conf; git -C $(ext)/$$* $$(@F) $$($$(@F))
$1: $(git.items:%=%/$1)
.PHONY: $1
endef

git.cmds := status st fetch pull
$(foreach _,$(git.cmds),$(eval $_ :=))
status := -s
$(foreach cmd, $(git.cmds), $(eval $(call git.cmd,$(cmd))))

status.help := git status -s
st.help := git status if st is an alias for status
$(foreach _,fetch pull,$(eval $_.help := git $_))
help += $(git.cmds)
help.loop += $(git.cmds)

define git.pull?
$1/pull?: $1/conf $(shell test -d $(ext)/$1 && git -C $(ext)/$1 log -1 HEAD..@{upstream} | ifne echo $1/do_pull)
$1/do_pull:; git -C $(ext)/$1 pull
endef
pull?: $(git.items:%=%/pull?)
.PHONY: pull?
pull?.help := git pull with test
help += pull?
help.loop += pull?

DRY ?= -n
define git.push
$1/push: $1/conf $(shell test -d $(ext)/$1 && (git -C $(ext)/$1 diff --quiet @{upstream} || echo $1/do_push))
$1/do_push:; git -C $(ext)/$1 push $(DRY)
endef
push: $(git.items:%=%/push)
.PHONY: push
push.help := git pull with test\n
push.help += default to dry mode\n
push.help += use "gmk push DRY=" to undry
help += push
help.loop += push

define git.branch
$1/branch: $1/conf; @echo $1 $(git.$1.version) $$$$(git -C $(ext)/$1 rev-parse --abbrev-ref HEAD)
endef
branch.header:; @echo name gmk git
branch: branch.header $(git.items:%=%/branch)
.PHONY: branch
branch.help := show gmk declared branch and actual used branch\n
branch.help += use "gmk branch | column -t" to tabulate output
help += branch

$(foreach cmd, pull? push branch, $(foreach item, $(git.items), $(eval $(call git.$(cmd),$(item)))))

define core.sshCommand
config.$1.configs.$0 := ssh -i ~/.ssh/$(config.$1.key) -F /dev/null
config.$1.configs.items += $0
endef

. := $(foreach config, $(config.items), $(eval $(call core.sshCommand,$(config))))

define config
$1_$2.dep  = test -d $(ext)/$1 &&
$1_$2.dep += git -C $(ext)/$1 config --local $2 > /dev/null || echo $1_$2/do_conf
$1_$2.cmd  = git -C $(ext)/$1 config --add $2 "$(config.$(git.$1.conf).configs.$2)"
$1_$2/conf: $$(shell $$($1_$2.dep))
$1_$2/do_conf:; $$($1_$2.cmd)
$1_conf += $1_$2/conf
.PHONY: $1_$2/conf $1_$2/do_conf
endef

. := $(foreach repo, $(git.items), \
	$(foreach conf, \
		$(config.$(git.$(repo).conf).configs.items), \
		$(eval $(call config,$(repo),$(conf)))))

. := $(foreach repo, $(git.items), $(eval $(repo)/conf: $(repo)/clone $($(repo)_conf)))

conf := $(git.items:%=%/conf)
conf: $(conf)
.PHONY: conf $(conf)
conf.help := git config using gmk data
help += conf
help.loop += conf

define mailmap.line
$1 <$(alias.$1.email)> $(alias.$1.full)
endef

. := $(foreach alias, $(alias.items), $(call lineinfile,$(call mailmap.line,$(alias)),$(mailmap)))

mailmap: $(mailmap)
.PHONY: mailmap
mailmap.help := generate mailmap for this repo
help += mailmap

$(foreach repo, $(git.items), $(call lineinfile,$(mailmap),$(ext)/$(repo)/.git/info/exclude))

mailmaps := $(git.items:%=$(ext)/%/$(mailmap))
$(mailmaps): $(mailmap); cp -p $< $@
mailmaps: conf $(mailmaps) $(git.items:%=$(ext)/%/.git/info/exclude)
.PHONY: mailmaps
mailmaps.help := generate mailmap for gmk items
help += mailmaps
help.loop += mailmaps

exclude: $(git.exclude)
.PHONY: exclude
exclude.help := lininfile ".git/info/exclude" for gmk
help += exclude

clean:; rm $(out).js
.PHONY: clean
clean.help := remove generated gmk json files
help += clean

clobber:; rm -r $(tmp) $(ext) $(mailmap)
.PHONY: clobber
clobber.help := remove all generated files
help += clobber

hub.config = github.com: [ { user: $1, oauth_token: $(shell pass $(hub.$1.token)), protocol: https } ]
hub = $(tmp)/$1.hub:; @echo '$(call hub.config,$1)' > $$@
$(foreach _, $(hub.items), $(eval $(call hub,$_)))
hubs := $(hub.items:%=$(tmp)/%.hub)
hub: $(hubs); @$(foreach _, $(hub.items), echo env HUB_CONFIG=$(tmp)/$_.hub;)
.PHONY: hub
help.hub := show env prefix line defining HUB_CONFIG for all gmk hub items
help += hub

~ := self/create self/delete
$~: quote = $(subst ",\\\",$1)#"
$~: hub := env HUB_CONFIG=$(tmp)/$(self.env).hub hub
$~: desc := $(and $(self.desc),-d \"'$(call quote,$(self.desc))'\")
$~: name := $(and $(self.organization), $(self.organization)/$(self.name))
$~: create := $(hub) create $(and $(self.private),-p) $(desc) $(name)
$~: delete := $(hub) delete $(self.name)
$~:; @echo $(strip $($(@F)))
.PHONY: $~
$(foreach _,create delete,$(eval self/$_.help := show hub line to self $_ on github))
help += $~
help.self += $~

ifdef self.remote
self/remote: $(if $(filter $(shell git remote | ifne git remote get-url origin),$(self.remote)),,self/do_remote)
self/do_remote:; git remote set-url origin $(self.remote)
.PHONY: self/remote self/do_remote
endif
self/remote.help := git remote set-url if self.remote is define
help += self/remote
help.self += self/remote

define self_config
$0_$1.dep += git config --local $1 > /dev/null || echo $0_$1/do_conf
$0_$1.cmd  = git config --add $1 "$(config.$(self.env).configs.$1)"
$0_$1/conf: $$(shell $$($0_$1.dep))
$0_$1/do_conf:; $$($0_$1.cmd)
$0_conf += $0_$1/conf
.PHONY: $0_$1/conf $0_$1/do_conf
endef

$(foreach _,$(config.$(self.env).configs.items),$(eval $(call self_config,$_)))
self/config: $(self_config_conf)
.PHONY: self/config
self/config.help := git config using gmk data for this repo
help += self/config
help.self += self/config

types := git config hub alias
items = echo $1 items: $(if $(filter undefined, $(origin $1.items)),no $1 items,$($1.items));
data :=
$(foreach _,$(types),$(eval data += $(call items,$_)))

$(foreach _,$(help),$(eval help/$_:; @echo $$$$'$($_.help)'))

help.simple := $(filter-out $(help.loop) $(help.self), $(help))

help.help.help := \ngmk help $$target\n
help.simple.help := simple targets: $(help.simple)\n
help.simple.help += targets without parameter\n
help.loop.help := loop targets: $(help.loop)\n
help.loop.help += targets which loop over all git items\n
help.loop.help += invoke as $$git_item/$$target to use on one item only\n
help.self.help := self targets: $(help.self)\n
help.self.help += targets for this git\n

help.cmd := $(foreach _, help simple loop self,echo $$'$(help.$_.help)';)
help.cmd += echo $$'this gmk data\n'; $(data)
help:; @$(help.cmd)
.PHONY: help
