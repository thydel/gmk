#!/usr/bin/make -f

MAKEFLAGS += -Rr --warn-undefined-variables
SHELL != which bash
.DEFAULT_GOAL :=  main

.DELETE_ON_ERROR:

git.test != git rev-parse --is-inside-work-tree > /dev/null 2>&1 && date
. := $(or $(git.test),$(error not in a git dir))
git.dir != git rev-parse --git-dir
git.exclude := $(git.dir)/info/exclude

tmp := .mk
ext ?= ext
self := $(lastword $(MAKEFILE_LIST))
file ?= jmk

adam := $(tmp)/.adam
ultimo := /proc/self
$(ultimo):;
$(adam):; touch -d @0 $@
old-or-young := && echo $(adam) || echo $(ultimo)
lineinfile = $(eval $2:: $(shell grep -q '$1' $2 $(old-or-young)); echo '$1' >> $$@)

dirs := $(tmp) $(ext)
stones := $(dirs:%=%/.stone)
stones: $(stones)
.PHONY: stones
$(self): $(stones) $(adam)
%/.stone:; mkdir -p $(@D); touch $@
$(call lineinfile,$(tmp),$(git.exclude))
$(call lineinfile,$(ext),$(git.exclude))

-include $(tmp)/$(file).mk

yml2js.py := import sys, yaml, json;
yml2js.py += json.dump(yaml.load(sys.stdin), sys.stdout, indent=2, default=str, sort_keys=True)

yml2js := python -c '$(yml2js.py)'

$(file).yml types.jq config.jq git.jq:;

out := $(tmp)/$(file)

$(out).js: $(file).yml $(self); @ < $< $(yml2js) > $@

$(out).mk: types.jq default.jq mk.jq
$(out).mk: $(out).js; < $< jq -f types.jq | jq -f default.jq | jq -f mk.jq -r > $@

main:; @echo $(git.items)
.PHONY: main

gitkey = $(config.$(git.$1.conf).key)

ifeq ($(ext),.)
$(foreach item, $(git.items), $(call lineinfile,$(item),$(git.exclude)))
endif

ifneq ($(ext),.)
$(git.items): % : $(ext)/%
.PHONY: $(git.items)
endif
$(git.items:%=%/clone): %/clone: $(ext)/%
gitdirs := $(git.items:%=$(ext)/%)
$(gitdirs): ssh = GIT_SSH_COMMAND='ssh -i ~/.ssh/$(call gitkey,$(@F))'
$(gitdirs):; $(ssh) git clone -b $(git.$(@F).version) $(git.$(@F).git) $(ext)/$(@F)
clone: $(gitdirs)
.PHONY: clone 

$(git.items:%=%/pull): %/pull: %/conf; git -C $(ext)/$* $(@F)
pull: $(git.items:%=%/pull)
.PHONY: pull

define core.sshCommand
config.$1.configs.$0 := ssh -i ~/.ssh/$(config.$1.key) -F /dev/null
config.$1.configs.items += $0
endef

. := $(foreach config, $(config.items), $(eval $(call core.sshCommand,$(config))))

define config
$1_$2.dep  = test -d $(ext)/$1 &&
$1_$2.dep += git -C $(ext)/$1 config --local $2 > /dev/null || echo $1_$2/do_conf
$1_$2.cmd  = git -C $(ext)/$1 config --add $2 "$(config.$(git.$1.conf).configs.$2)"
$1_$2/conf: $$(shell $$($1_$2.dep))
$1_$2/do_conf:; $$($1_$2.cmd)
$1_conf += $1_$2/conf
.PHONY: $1_$2/conf $1_$2/do_conf
endef

. := $(foreach repo, $(git.items), \
	$(foreach conf, \
		$(config.$(git.$(repo).conf).configs.items), \
		$(eval $(call config,$(repo),$(conf)))))

, := $(foreach repo, $(git.items), $(eval $(repo)/conf: $(repo)/clone $($(repo)_conf)))

conf := $(git.items:%=%/conf)
conf: $(conf)
.PHONY: conf $(conf)

exclude: $(git.exclude)

clean:; rm $(out).js
.PHONY: clean
